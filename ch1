1-1. a, b = -1

1-2. a, b = 0.5

1-3. a--30kmph--b
     |          |
     +--60kmph--+

1-4. a/\/\/\/\/\b
     |          |______________________
     \_________________________________|

1-5
a.  S = {1,2}, T = 2
b.  S = {1,2}, T = 2
b.  S = {3,2,2}, T = 4

1-6. S_1 = {1,3,5}, S_2 = {1,2}, S_3 = {3,4}, S_4 = {5,6}

1-7
by induction on z.
base case: trivial
inductive step: assume true for z < k, try k
multiply(cy, floor(k/c)) + y(k % c)
= cy.floor(k/c) + y(k % c), by inductive assumption since floor(k/c) < k
= y(c.floor(k/c) + (k % c))
= yk, by definition of modulo □

1-8
by induction on n
base case: n=0, loop is a noop, so algorithm returns a0
inductive step: assume true for n=k; try n=k+1

algorithm, with first iteration of the loop pulled out:
p = a_{k+1}*x + a_k
for i in [k-1, 0]: p = p*x + a_i

This is P_k(x) with A_k replaced by (a_{k+1}.x + a_k)
= (a_{k+1}.x + a_k)x^k + P_{k-1}(x)
= a_{k+1}.x^{k+1} + a_k.x^k + P_{k-1}(x)
= a_{k+1}.x^{k+1} + P_k(x) □

1-9
Bubblesort
by induction on i
after k iterations, assume that the last k elements are sorted and are the largest k elements in A
consider the k+1th iteration, ie i = n - k - 1
after the j-loop, the maximal element in [A[1], A[i]] will be A[i]
but by inductive assumption this will be less than or equal to any of the last k elements
so the last k+1 elements are now sorted and are the largest k+1 elements in A
