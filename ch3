3-1
def is_balanced_and_nested(string s)
  count = 0
  for char, position in s
    if char == "("
      count++
    else if char == ")"
      if count > 0
        count--
      else
        print "improperly nested at " + position
        return false

  if count !== 0
    print "unbalanced"
    return false

  return true

3-2
# assuming I have head, tail, cons
def reverse(list l)
  reverse_helper(l, [])

def reverse_helper(list, result)
  if is_empty(list)
    return result

  return reverse_helper(tail(list), cons(head(list), result))

3-3
a. array of size 8, has 7 items
add 2 items, grows to 16
remove 2, it's less than half full, shrinks to 8
repeat

b. better strategy: cut in half when falls below a quarter full. Then in order to get a sequence like the one above, need to grow and shrink by a factor of 2 each time

3-4
initialize an array of length n. Pointer to item with key n goes at position n.

3-5
a. 0.25
b. |leaves| / |leaves + internals|
= n / (n + n-1)
-> 0.5 asymptotically

3-6
give each node a pointer to the next and previous. Need to modify insert and delete to update the two either side of the inserted/deleted one

3-7
keep a note of the minimum and maximum elements. on insert and delete, check and update them if necessary

3-8
a balanced binary search tree would work except that deleting the kth smallest element would be min(T) + k successor ops, each of which is potentially up to log n, for a total of O(k.log(n)), not O(log(n)).

So, a balanced search tree combined with... something

gave up, looked up answer: https://en.wikipedia.org/wiki/Order_statistic_tree . store the size of the left subtree in the node, then can efficiently find the kth item.

3-9
can't you just add a new right-child to the maximal element of S_1, and plonk the root of S_2 there? or the reverse, if that would make it less unbalanced.

3-10
Assuming the w_i are in units of kg:
naive approach:

bins = []
for weight in weights
  for bin in bins
    # binweights is sorted, so if there are any with enough room, the first is the one we want
    if bin + weight < 1
      bin += weight
      bins.sort()
      continue
    # No bin has room; start a new one
    bins.push(0) # push on to the end, so sorting preserved
return length(bins)

that's O(n^3) (as bins ~ weights in the worst case)
to get to O(n log n), use a binary tree instead of a list of bins, so:

bins = new BST
for weight in weights
  if there exists a largest node with value less than (1 - weight)
    delete it
    insert node with value (weight + weight of deleted node)
  else
    insert bin with value 0
return number_of_nodes(bins)

All the bst ops are log(n), so this is n log(n)

For worst-fit, replace "if there exists a largest node with value less than (1 - weight)" with "if there exists a smallest node with value > 0 and value < (1 < weight)"

3-11
a. The number of (i,j) pairs is n^2. So a hash table from (i,j) to min([x_i, ..., x_j]) would fit this.
b. Maybe something like: start with a complete binary tree with n leaves, where the leaves are the x_i, and every internal node stores the lowest value below it. This takes up 2n-1 = O(n) space. Then to find the lowest value between x_i and x_j, walk the tree from x_i upwards, and x_j upwards, until you meet, keeping a note of the smallest number you see in any node that represents a set of numbers completely within [x_i, x_j]. More specifically, the right child of any node you visit *after travelling rightwards* on the way up from x_i, and the left child of any node you visit after travelling leftwards up from x_j, will be completely contained within the interval. (plus x_i and x_j themselves). Then once you meet, take the min of your two mins. (Need to check whether you've met the other before looking at the left/right child, or will count too many things).

I think that should work.

Looked up solution: construct tree as above but store the range at each node, then can just start at the root and do
def find_min(range, node)
  if range entirely contained within current node's range, return node val
  if no intersection, return +infty
  return min(find_min(range, left), find_min(range, right))

That's more elegant than my solution. Though mine technically takes up a bit less space as it doesn't have to store the range at each node.

